@inject IStatusData statusData

<MudDialog>
    <DialogContent>
        @if (statuses != null) {
            <MudStack>
                <MudStack AlignItems="AlignItems.Center" Row="true">
                    <MudSelect Variant="Variant.Outlined" T="Status" Value="selectedStatus" ValueChanged="@((s) => OnStatusSelectionValueChanged(s))" Label="Statuses" AnchorOrigin="Origin.BottomCenter" Disabled="@creatingNewStatus">
                        @foreach (Status status in statuses)
                        {
                            <MudSelectItem Value="@status">@status.Name</MudSelectItem>
                        }
                    </MudSelect>
                    <MudTooltip Text="Create New Status">
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddNewStatus" Disabled="creatingNewStatus" />
                    </MudTooltip>
                    <MudTooltip Text="Delete Status">
                        <MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="RemoveStatus" />
                    </MudTooltip>
                </MudStack>
                            

                @if (creatingNewStatus)
                {
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudForm @ref="form" @bind-IsValid="@success">
                            <MudStack>
                                <MudTextField T="string" Label="Status Name" Variant="Variant.Filled" @bind-Value="addNewStatus.Name" Required="true" Immediate="true" RequiredError="Status Name is required!" />
                                <MudTextField T="string" Label="Description" Variant="Variant.Filled" Lines="3" @bind-Value="addNewStatus.Description" />
                                <MudStack AlignItems="AlignItems.Center" Row="true">
                                    <MudColorPicker Label="Pip Colour" @bind-Text="addNewStatus.Colour" Placeholder="Select Colour" ColorPickerView="ColorPickerView.GridCompact" />
                                </MudStack>
                                <MudStack Row="true">
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveNewStatusAsync" Disabled="@(!success)">Save New Status</MudButton>
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CancelNewStatus">Cancel</MudButton>
                                </MudStack>
                            </MudStack>
                        </MudForm>
                    </MudPaper>
                }

                @if (selectedStatus != null && creatingNewStatus == false)
                {
                    <MudPaper Elevation="3" Class="pa-4">
                        <MudForm>
                            <MudStack>
                                <MudTextField T="string" Label="Status Name" Variant="Variant.Filled" @bind-Value="selectedStatus.Name" Required="true" Immediate="true" RequiredError="Status Name is required!" />
                                <MudTextField T="string" Label="Description" Variant="Variant.Filled" Lines="3" @bind-Value="selectedStatus.Description" />
                                <MudStack AlignItems="AlignItems.Center" Row="true">
                                    <MudColorPicker Label="Pip Colour" @bind-Text="selectedStatus.Colour" Placeholder="Select Colour" ColorPickerView="ColorPickerView.GridCompact" />
                                </MudStack>
                            </MudStack>
                        </MudForm>
                    </MudPaper>
                } 
                else
                {
                    selectedStatus = statuses.First();
                }
            </MudStack>
        }
        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(creatingNewStatus)">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public User LoggedInUser { get; set; }

    List<Status> statuses;
    Status selectedStatus;

    MudForm form;
    bool success;
    Status addNewStatus;
    bool creatingNewStatus;

    protected async override Task OnInitializedAsync()
    {
        statuses = await statusData.GetAllStatusesAsync(ignoreCache:true);
        selectedStatus = statuses.First();
    }

    private void OnStatusSelectionValueChanged(Status s)
    {
        s.SetModifiedByAndDateTime(LoggedInUser.DisplayName);
        selectedStatus = s;
    }

    private void AddNewStatus()
    {
        addNewStatus = new()
        {
            Name = "",
            Description = ""
        };

        addNewStatus.SetModifiedByAndDateTime(LoggedInUser.DisplayName);

        creatingNewStatus = true;

        StateHasChanged();
    }

    private async void SaveNewStatusAsync()
    {
        statuses.Add(addNewStatus);
        await statusData.CreateStatusAsync(addNewStatus);

        creatingNewStatus = false;

        StateHasChanged();
    }

    private void CancelNewStatus()
    {
        creatingNewStatus = false;

        StateHasChanged();
    }

    private async void RemoveStatus()
    {
        statuses.RemoveAll(x => x.BsonId == selectedStatus.BsonId);
        await statusData.RemoveStatusAsync(selectedStatus);
        
        selectedStatus = statuses.First();
        StateHasChanged();
    }

    private async void Submit()
    {
        await statusData.UpdateStatusesAsync(statuses);
        MudDialog.Close(DialogResult.Ok(true));
    }   

    private void Cancel()
    {
        selectedStatus = null;
        MudDialog.Cancel();  
    } 
}