@inject ICategoryData categoryData
@namespace ZoniSMUI.Components.ListSettings

<MudDialog>
    <DialogContent>
            <MudStack>
                <MudStack AlignItems="AlignItems.Center" Row="true">
                    <MudSelect Variant="Variant.Outlined" T="Category" Value="selectedCategory" ValueChanged="@((s) => OnCategorySelectionValueChanged(s))" Label="Categories" AnchorOrigin="Origin.BottomCenter" Disabled="@creatingNewCategory">
                    @if (categories != null && categories.Any())
                    {
                        foreach (Category category in categories)
                        {
                            <MudSelectItem Value="@category">@category.Name</MudSelectItem>
                        }
                    }
                    </MudSelect>
                    <MudTooltip Text="Create New Category">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddNewCategory" Disabled="creatingNewCategory" />
                    </MudTooltip>
                    <MudTooltip Text="Delete Category">
                    <MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="RemoveCategory" Disabled="categories != null && !categories.Any()" />
                    </MudTooltip>
                </MudStack>
                            
                @if (creatingNewCategory)
                {
                <MudPaper Elevation="3" Class="pa-4">
                    <MudForm @ref="form" @bind-IsValid="@success">
                        <MudStack>
                            <MudTextField T="string" Label="Category Name" Variant="Variant.Filled" @bind-Value="addNewCategory.Name" Required="true" Immediate="true" RequiredError="Category Name is required!" />
                            <MudTextField T="string" Label="Description" Variant="Variant.Filled" Lines="3" @bind-Value="addNewCategory.Description" />
                            <MudStack Row="true" Class="pa-2">
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveNewCategoryAsync" Disabled="@(!success)">Save New Category</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CancelNewCategory">Cancel</MudButton>
                            </MudStack>
                        </MudStack>
                    </MudForm>
                </MudPaper>
                }

                @if (selectedCategory != null && creatingNewCategory == false)
                {
                <MudPaper Elevation="3" Class="pa-4">
                    <MudStack>
                        <MudTextField T="string" Label="Category Name" Variant="Variant.Filled" @bind-Value="selectedCategory.Name" Required="true" Immediate="true" RequiredError="Category Name is required!" />
                        <MudTextField T="string" Label="Description" Variant="Variant.Filled" Lines="3" @bind-Value="selectedCategory.Description" />
                    </MudStack>
                </MudPaper>
                } 
            </MudStack>
        
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Disabled="@(creatingNewCategory)">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public User LoggedInUser { get; set; }

    List<Category> categories;
    Category selectedCategory;

    MudForm form;
    bool success;
    Category addNewCategory;
    bool creatingNewCategory;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategoriesAsync(ignoreCache:true);

        SetSelectedCategory();
    }

    private void OnCategorySelectionValueChanged(Category a)
    {
        selectedCategory = a;
    }

    private void AddNewCategory()
    {
        addNewCategory = new()
        {
            Name = "",
            Description = ""
        };

        addNewCategory.SetModifiedByAndDateTime(LoggedInUser.DisplayName);

        creatingNewCategory = true;

        StateHasChanged();
    }

    private async void SaveNewCategoryAsync()
    {
        categories.Add(addNewCategory);
        await categoryData.CreateCategoryAsync(addNewCategory);

        creatingNewCategory = false;

        SetSelectedCategory();

        StateHasChanged();
    }

    private void CancelNewCategory()
    {
        creatingNewCategory = false;

        StateHasChanged();
    }

    private async void RemoveCategory()
    {
        categories.RemoveAll(c => c.BsonId == selectedCategory.BsonId);
        await categoryData.RemoveCategoryAsync(selectedCategory);

        SetSelectedCategory();

        StateHasChanged();
    }

    private void SetSelectedCategory() 
    {
        if (categories != null && categories.Any()) 
        {
            selectedCategory = categories.First();
        } 
        else 
        {
            selectedCategory = null;
        }
    }

    private async void Submit()
    {
        await categoryData.UpdateCategoriesAsync(categories);
        MudDialog.Close(DialogResult.Ok(true));
    }   

    private void Cancel()
    {
        selectedCategory = null;
        MudDialog.Cancel();  
    } 
}