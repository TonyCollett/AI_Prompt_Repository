@page "/Ticket/Create"
@attribute [Authorize]
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject IUserData userData
@inject ITicketData ticketData
@inject IDbConnection dbConnection
@inject ISettingsData settingsData
@inject ISnackbar Snackbar

<MudOverlay @bind-Visible="showLoadingArt" DarkBackground="true" ZIndex="9999" AutoClose="true">
     <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>

<EditForm Model="createdTicket" OnValidSubmit="CreateTicket">
    New Ticket ID: @_id
    <MudPaper Class="pa-16 ma-2" Elevation="3" Square="true">
        <MudTabs Outlined="true" Position="Position.Left" Rounded="true" Border="true" ApplyEffectsToContainer="true"
            Class="mt-8" PanelClass="pa-6" @ref="tabs" @bind-ActivePanelIndex="activeTab">
            <MudTabPanel Text="General">
                <MudGrid>
                    <MudItem lg="12" sm="12">
                        <MudTextField Variant="Variant.Outlined" T="string" Label="Title" @bind-Value="createdTicket.Title" Required="true" RequiredError="Title is required!" />
                    </MudItem>
                    <MudItem lg="12" sm="12">
                        <MudTextField Variant="Variant.Outlined" T="string" Label="Description" @bind-Value="createdTicket.Description" Lines="5" />
                    </MudItem>
                    <MudItem lg="4" sm="12">
                        <MudAutocomplete Variant="Variant.Outlined" T="User" Label="Affected User" @bind-Value="createdTicket.AffectedUser"
                            SearchFunc="@UserLookup" ToStringFunc="@(e=> e==null?null : $"{e.DisplayName}")" />
                    </MudItem>
                    <MudItem lg="4" sm="12">
                        <MudSelect Variant="Variant.Outlined" T="string" Label="Priority"
                               AnchorOrigin="Origin.BottomCenter">
                            <MudSelectItem Value="@("1")" />
                            <MudSelectItem Value="@("2")" />
                            <MudSelectItem Value="@("3")" />
                            <MudSelectItem Value="@("4")" />
                            <MudSelectItem Value="@("5")" />
                        </MudSelect>
                    </MudItem>
                    <MudItem lg="4" sm="12">
                        <MudAutocomplete Variant="Variant.Outlined" T="Category" Label="Category" @bind-Value="createdTicket.Category"
                            SearchFunc="@CategoryLookup" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" />
                    </MudItem>
                    <MudItem lg="4" sm="12">
                        <MudAutocomplete Variant="Variant.Outlined" T="User" Label="Assigned User" @bind-Value="createdTicket.AssignedUser"
                            SearchFunc="@UserLookup" ToStringFunc="@(e=> e==null?null : $"{e.DisplayName}")" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
            <MudTabPanel Text="Attachments">
                <FileUpload />
            </MudTabPanel>
        </MudTabs>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="ml-auto">Create</MudButton>
    </MudPaper>

</EditForm>


@code {
    [CascadingParameter(Name = "ApplicationSettings")] public List<Setting> ApplicationSettings { get; set; }
    [CascadingParameter(Name = "LoggedInUser")] public User LoggedInUser { get; set; }

    private int activeTab = 0;
    MudTabs tabs;
    private string _id;
    private bool showLoadingArt = false;

    public class CreateTicketModel
    {
        public string Title { get; set; }
        public string Description { get; set; }
        public User AffectedUser { get; set; }
        public User AssignedUser { get; set; }
        public Category Category { get; set; }
        public Status Status { get; set; }
        public string OwnerNotes { get; set; }
        public bool Archived { get; set; } = false;
        public IEnumerable<byte[]> Attachments { get; set; }
    }

    CreateTicketModel createdTicket = new();
    private User loggedInUser;
    private List<Category> categoryList;
    private List<Status> statusList;
    private List<User> userList;

    protected async override Task OnInitializedAsync()
    {
        showLoadingArt = true;

        loggedInUser = await authProvider.GetUserFromAuth(userData);

        _id = await settingsData.GetTicketIdAsStringAsync();

        categoryList = await categoryData.GetAllCategoriesAsync();
        statusList = await statusData.GetAllStatusesAsync();
        userList = await userData.GetAllUsersAsync();
        showLoadingArt = false;
    }

    protected async Task CreateTicket()
    {
        var ticket = new Ticket
            {
                TicketId = _id,
                Title = createdTicket.Title,
                Description = createdTicket.Description,
                Category = createdTicket.Category,
                Status = statusList.Where(x => x.Name == "New").First(),
                CreatedBy = loggedInUser,
                LastUpdatedBy = loggedInUser,
                OwnerNotes = createdTicket.OwnerNotes,
                AffectedUser = createdTicket.AffectedUser,
                AssignedUser = createdTicket.AssignedUser,
                Archived = createdTicket.Archived,
                Attachments = createdTicket.Attachments
            };

        await ticketData.CreateTicketAsync(ticket);
        Snackbar.Add("Save Successful");
        navManager.NavigateTo($"/");
    }

    private async Task<IEnumerable<User>> UserLookup(string value)
    {
        await Task.Delay(10);
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value)){
            return userList.ToList();
        }
        return userList.Where(x => x.DisplayName.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<Category>> CategoryLookup(string value)
    {
        await Task.Delay(10);
        // if text is null or empty, show complete list
        if (string.IsNullOrEmpty(value))
        {
            return categoryList.ToList();
        }
        return categoryList.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
