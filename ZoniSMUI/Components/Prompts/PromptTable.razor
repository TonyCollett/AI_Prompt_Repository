@inject IPromptData promptData
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IUserData userData
@attribute [Authorize]

<MudTable ServerData="@(new Func<TableState, Task<TableData<Prompt>>>(ServerReload))" Dense="true" Hover="true"
    @ref="table" T="Prompt" OnRowClick="RowClick">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@_headerText</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="id_field" T="Prompt">Prompt Number</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ti_field" T="Prompt">Title</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="cb_field" T="Prompt">Created By</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="dc_field" T="Prompt">Date Created</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="lm_field" T="Prompt">Last Modified</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="CreatedBy">@context.CreatedBy.DisplayName</MudTd>
        <MudTd DataLabel="DateCreated">@context.DateCreated</MudTd>
        <MudTd DataLabel="LastModified">@context.LastUpdatedDate</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public User LoggedInUser { get; set; }
    [Parameter]
    public bool ActiveOnly { get; set; } = false;

    private string _headerText;

    private MudTable<Prompt> table;
    IEnumerable<Prompt> pagedData;
    private int totalItems;
    private string searchString = null;

    private async Task<TableData<Prompt>> ServerReload(TableState state)
    {
        IEnumerable<Prompt> data = null;

        data = await promptData.GetAllPromptsAsync();
        _headerText = "All Prompts";

        if (data != null) {
            data = data.Where(prompt =>
            {
                if (string.IsNullOrWhiteSpace(searchString))
                    return true;
                if (prompt.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (prompt.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (prompt.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (prompt.CreatedBy.DisplayName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                return false;
            }).ToArray();

            totalItems = data.Count();
            switch (state.SortLabel)
            {
                case "id_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.Id);
                    break;
                case "ti_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.Title);
                    break;
                case "cb_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.CreatedBy.DisplayName);
                    break;
                case "dc_field":
                    data = data.OrderByDirection(state.SortDirection, o => o.DateCreated);
                    break;
            }

            pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        }

        return new TableData<Prompt>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void RowClick(TableRowClickEventArgs<Prompt> args)
    {
        navManager.NavigateTo($"/Prompt/Details/{args.Item.Id}");
    }
}
