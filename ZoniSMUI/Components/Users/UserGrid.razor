@inject IUserData userData
@inject NavigationManager navManager
@attribute [Authorize]

<MudTable ServerData="@(new Func<TableState, Task<TableData<User>>>(ServerReload))" Hover="true"
          @ref="_table" T="User" OnRowClick="RowClick">
    <ToolBarContent>
        <MudText Typo="Typo.h6">@_headerText</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="dn_field" T="User">Display Name</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="em_field" T="User">Email Address</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ci_field" T="User">City</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="al_field" T="User">Access Level</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ti_field" T="User">Created Tickets</MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="DisplayName">@context.DisplayName</MudTd>
        <MudTd DataLabel="EmailAddress">@context.EmailAddress</MudTd>
        <MudTd DataLabel="City">@context.City</MudTd>
        <MudTd DataLabel="AccessLevel">@context.UserType.ToString()</MudTd>
        <MudTd DataLabel="CreatedTickets">@context.CreatedTickets.Count()</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<User> _data = new List<User>();
    private string _searchString = String.Empty;
    private IEnumerable<User> pagedData = new List<User>();
    private MudTable<User> _table;
    private int totalItems;
    private string _headerText;

    private async Task<TableData<User>> ServerReload(TableState state)
    {
        _data = await userData.GetAllUsersAsync();
        _headerText = "All Users";

        if (_data != null)
        {
            _data = _data.Where(user =>
            {
                if (string.IsNullOrWhiteSpace(_searchString))
                    return true;
                if (user.DisplayName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (user.EmailAddress.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (user.City.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                if (user.UserType.ToString().Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                    return true;
                return false;
            }).ToArray();

            totalItems = _data.Count();
            switch (state.SortLabel)
            {
                case "dn_field":
                    _data = _data.OrderByDirection(state.SortDirection, o => o.DisplayName);
                    break;
                case "em_field":
                    _data = _data.OrderByDirection(state.SortDirection, o => o.EmailAddress);
                    break;
                case "ci_field":
                    _data = _data.OrderByDirection(state.SortDirection, o => o.City);
                    break;
                case "al_field":
                    _data = _data.OrderByDirection(state.SortDirection, o => o.UserType.ToString());
                    break;
                case "ti_field":
                    _data = _data.OrderByDirection(state.SortDirection, o => o.CreatedTickets.Count());
                    break;
            }

            pagedData = _data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        }

        return new TableData<User>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }

    private void RowClick(TableRowClickEventArgs<User> args)
    {
        navManager.NavigateTo($"/User/Details/{args.Item.Id}/");
    }

    private void ClickCreate()
    {
        navManager.NavigateTo("/User/Create");
    }
}
