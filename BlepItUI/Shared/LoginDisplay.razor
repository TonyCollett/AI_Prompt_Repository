@using System.Security.Claims
@inject IUserData userData
@inject IHttpContextAccessor _httpContextAccessor

<AuthorizeView>
    <Authorized>
        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" FullWidth="true">
            <ActivatorContent>
                <MudStack AlignItems="AlignItems.Center" Row="true">
                    <MudStack Spacing="1" Justify="Justify.Center">
                        <MudText Typo="Typo.body1">
                            @LoggedInUser?.FirstName @LoggedInUser?.LastName
                        </MudText>
                        <MudText Typo="Typo.body2">
                            @LoggedInUser?.EmailAddress
                        </MudText>
                    </MudStack>
                    <MudAvatar Color="Color.Secondary" Variant="Variant.Filled">
                        BI
                    </MudAvatar>
                </MudStack>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>
                    Notifications
                </MudMenuItem>
                <MudMenuItem>
                    <a href="/Profile/@LoggedInUser?.Id">
                        Profile
                    </a>
                </MudMenuItem>
                @if (LoggedInUser?.VIPStatus == VIPStatus.Admin)
                {
                    <MudMenuItem>
                        <a href="/Admin">
                            Admin
                        </a>
                    </MudMenuItem>
                }
                <MudMenuItem>
                    User Settings
                </MudMenuItem>
                <MudMenuItem>
                    <a href="/Identity/Logout">
                        Logout
                    </a>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </Authorized>
    <NotAuthorized>
        <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <ActivatorContent>
                <MudBadge Visible="true" Content="1" Color="Color.Warning" Overlap="true" Bordered="true">
                    <MudAvatar Color="Color.Secondary" Variant="Variant.Filled">
                        Blep
                    </MudAvatar>
                </MudBadge>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>
                    <MudButton Href="/Identity/Login" Variant="Variant.Filled" Color="Color.Primary">Register/Login</MudButton>
                </MudMenuItem>
            </ChildContent>
        </MudMenu>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public User LoggedInUser { get; set; }

    private ClaimsPrincipal User;

    protected async override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            // Set the user to determine if they are logged in
            User = _httpContextAccessor.HttpContext.User;

            Claim nameIdentifier = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.NameIdentifier);
            Claim givenName = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.GivenName);
            Claim surname = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Surname);
            Claim email = _httpContextAccessor.HttpContext.User.FindFirst(ClaimTypes.Email);

            if (nameIdentifier != null)
            {
                bool checkUserIsRegistered = await userData.IsUserRegisteredAsync(nameIdentifier.Value);

                if (checkUserIsRegistered)
                {
                    var existingUser = await userData.GetUserFromAuthentication(nameIdentifier.Value);
                } 
                else
                {
                    User newUser = new User()
                    {
                        ObjectIdentifier = nameIdentifier.Value,
                        FirstName = givenName?.Value,
                        LastName = surname?.Value,
                        EmailAddress = email?.Value,
                    };

                    await userData.CreateUserAsync(newUser);
                }
            }
        }
        catch { }
    }
}