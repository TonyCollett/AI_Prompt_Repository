@inherits LayoutComponentBase
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IUserData userData

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider 
    FullWidth="true"
    MaxWidth="MaxWidth.Large"/>
<MudSnackbarProvider />

<PageTitle>BlepIt</PageTitle>
<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar Dense="false">
                <MudText Class="pl-4" Typo="Typo.h4" @onclick="GoHome">BlepIt</MudText>
                <MudSpacer />
                <MudStack AlignItems="AlignItems.Center" Row="true">
                    <MudDivider Vertical="true" FlexItem="true" />
                    <MudToggleIconButton @bind-Toggled="@_isDarkMode" 
                        Color="Color.Surface" Icon="@Icons.Material.Filled.DarkMode"
                        ToggledColor="Color.Primary" ToggledIcon="@Icons.Material.Filled.LightMode" />
                    <MudDivider Vertical="true" FlexItem="true" />
                    @if(_loggedInUser != null) {
                    <LoginDisplay LoggedInUser="@_loggedInUser" />
                    }
                </MudStack>
            </MudAppBar>
            <MudDrawer Open="true" ClipMode="clipMode" Elevation="1" Variant="@DrawerVariant.Mini">
                <MudNavMenu Bordered="false">
                    <MudButton Class="pa-2 ma-2" Href="/Prompt/Create/" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">
                        Create Prompt
                    </MudButton>
                    <MudNavLink @onclick="@(() => NavigateTo("TrendingPrompts"))" Icon="@Icons.Material.Filled.ReportProblem">
                        Trending Prompts
                    </MudNavLink>
                    <MudNavLink @onclick="@(() => NavigateTo("TopPrompts"))" Icon="@Icons.Material.Filled.ReportProblem">
                        Top Prompts
                    </MudNavLink>
                    <MudNavLink @onclick="@(() => NavigateTo("RandomPrompt"))" Icon="@Icons.Material.Filled.ReportProblem">
                        Random Prompt
                    </MudNavLink>
                    @if(_loggedInUser != null)
                    {
                    <MudNavLink @onclick="@(() => NavigateTo("MyPrompts"))" Icon="@Icons.Material.Filled.ReportProblem">
                        My Prompts
                    </MudNavLink>
                    }
                    <MudNavLink @onclick="@(() => NavigateTo("Settings"))" Icon="@Icons.Material.Filled.VerifiedUser">
                        Users
                    </MudNavLink>
                </MudNavMenu>
            </MudDrawer>

            <MudMainContent Class="pt-16 px-5 pb-15">
                <MudContainer Class="mt-4" MaxWidth="MaxWidth.ExtraExtraLarge">
                    <CascadingValue Value="@_loggedInUser" Name="LoggedInUser">
                        @Body
                    </CascadingValue>
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <NotAuthorised />
    </NotAuthorized>
</AuthorizeView>

@code {
    bool open = true;
    DrawerClipMode clipMode = DrawerClipMode.Always;
    private User _loggedInUser;

    protected async override Task OnInitializedAsync()
    {
        var checkusers = await userData.GetAllUsersAsync();

        if (checkusers.Any() == false)
        {
            var tonyAdmin = new User()
            {
                ObjectIdentifier = "22dd62f7-13fc-4c1c-955c-3b93d0cebc73",
                FirstName = "Tony",
                LastName = "Collett",
                EmailAddress = "tony.collett@outlook.com",
                UserType = UserType.Admin,
                Notifications = new List<Notification>()
            };

            await userData.CreateUserAsync(tonyAdmin);
        }

        _loggedInUser = await authProvider.GetUserFromAuth(userData);
    }

    private MudTheme _theme = new();
    private bool _isDarkMode = true;

    void ToggleDrawer()
    {
        open = !open;
    }

    void GoHome()
    {
        navManager.NavigateTo("/");
    }

    void NavigateTo(string url)
    {
        navManager.NavigateTo($"/{url}");
    }
}