@inherits LayoutComponentBase
@inject NavigationManager navManager
@inject AuthenticationStateProvider authProvider
@inject IUserData userData

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />
<MudDialogProvider 
    FullWidth="true"
    MaxWidth="MaxWidth.Large"/>
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1" Dense="false">
        <MudText Class="pl-4" Typo="Typo.h4" @onclick="GoHome">BlepIt - For AI Prompt Ideas</MudText>
        <MudSpacer />
        <MudStack AlignItems="AlignItems.Center" Row="true">
            <SearchBar SearchString="searchTerm" OnSearchCallback="@PerformSearch"/>
            <MudDivider Vertical="true" FlexItem="true" />
            <MudToggleIconButton @bind-Toggled="@_isDarkMode" 
                Color="Color.Surface" Icon="@Icons.Material.Filled.DarkMode"
                ToggledColor="Color.Primary" ToggledIcon="@Icons.Material.Filled.LightMode" />
            <MudDivider Vertical="true" FlexItem="true" />
            @if(_loggedInUser != null)
            {
            <LoginDisplay LoggedInUser="@_loggedInUser" />
                
            } else
            {
            <LoginDisplay />
            }
        </MudStack>
    </MudAppBar>
    <MudDrawer Open="true" ClipMode="DrawerClipMode.Always" Elevation="1" Variant="@DrawerVariant.Mini">
        <MudNavMenu Bordered="false">
            @if (_loggedInUser != null)
            {
                <MudDrawerHeader>
                    <MudButton @onclick="@(() => NavigateTo("Prompt/Create"))" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">
                        Create Prompt
                    </MudButton>
                </MudDrawerHeader>
            }
            <MudNavLink @onclick="@(() => NavigateTo("Prompts/New"))" Icon="@Icons.Material.Filled.NewReleases">
                Newest Prompts
            </MudNavLink>
            <MudNavLink @onclick="@(() => NavigateTo("Prompts/Trending"))" Icon="@Icons.Material.Filled.TrendingUp">
                Trending Prompts
            </MudNavLink>
            <MudNavLink @onclick="@(() => NavigateTo("Prompts/TopFavourites"))" Icon="@Icons.Material.Filled.Star">
                Most Favourited Prompts
            </MudNavLink>
            <MudNavLink @onclick="@(() => NavigateTo("Prompts/Random"))" Icon="@Icons.Material.Filled.Shuffle">
                Random Prompt
            </MudNavLink>
            @if(_loggedInUser != null)
            {
            <MudNavLink @onclick="@(() => NavigateTo("Me/Prompts"))" Icon="@Icons.Material.Filled.TextSnippet">
                My Prompts
            </MudNavLink>
            <MudNavLink @onclick="@(() => NavigateTo("Me/Favourites"))" Icon="@Icons.Material.Filled.Favorite">
                My Favourite Prompts
            </MudNavLink>
            }
            <MudNavLink @onclick="@(() => NavigateTo("Users"))" Icon="@Icons.Material.Filled.EmojiPeople">
                Users
            </MudNavLink>
        </MudNavMenu>
    </MudDrawer>

    <MudMainContent Class="pt-16 px-5 pb-15">
        <MudContainer Class="mt-4" MaxWidth="MaxWidth.ExtraExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>

    <MudScrollToTop>
        <MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
    </MudScrollToTop>
</MudLayout>

@code {
    private User _loggedInUser;
    private MudTheme _theme = new();
    private bool _isDarkMode = true;
    private string _searchTerm = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        var checkusers = await userData.GetAllUsersAsync();

        if (checkusers.Any() == false)
        {
            var tonyAdmin = new User()
            {
                ObjectIdentifier = "22dd62f7-13fc-4c1c-955c-3b93d0cebc73",
                FirstName = "Tony",
                LastName = "Collett",
                EmailAddress = "tony.collett@outlook.com",
                Notifications = new List<Notification>()
            };

            await userData.CreateUserAsync(tonyAdmin);
        }

        _loggedInUser = await authProvider.GetUserFromAuthAsync(userData);
    }

    private void GoHome()
    {
        navManager.NavigateTo("/");
    }

    private void NavigateTo(string url)
    {
        navManager.NavigateTo($"/{url}");
    }

    private void PerformSearch(string searchText)
    {
        navManager.NavigateTo($"/Search/{searchText}");
    }
}