@page "/Prompt/{PromptId}"
@inject AuthenticationStateProvider authProvider
@inject NavigationManager navManager
@inject IDialogService DialogService
@inject IPromptData promptData
@inject IUserData userData

@if (prompt != null)
{
    <MudPaper Class="pa-3" Elevation="4">
    <MudGrid>
        <MudItem xs="12">
            <MudStack Spacing="8" AlignItems="AlignItems.Center" Row="true">
                <MudAvatar Color="Color.Warning" Variant="Variant.Filled">
                    <MudIcon Color="Color.Dark" Icon="@Icons.Custom.Uncategorized.Radioactive" Size="Size.Large" />
                </MudAvatar>
                <MudText Typo="Typo.h4">@prompt.Title</MudText>
            </MudStack>
        </MudItem>
        <MudItem xs="12">
            <MudStack>
                <MudItem lg="12" sm="12">
                    <MudTextField Variant="Variant.Outlined" T="string" Label="Title" Value="@prompt.Title" ReadOnly="true" />
                </MudItem>
                <MudItem lg="12" sm="12">
                    <MudTextField Variant="Variant.Outlined" T="string" Label="Description" Value="@prompt.Description" Lines="5" ReadOnly="true" />
                </MudItem>
            </MudStack>
        </MudItem>

        <MudItem xs="3">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="EditPrompt" Class="ml-auto" Disabled="false">
                Edit
            </MudButton>
        </MudItem>

    </MudGrid>


    </MudPaper>
}
else
{
<MudOverlay DarkBackground="true" ZIndex="9999" AutoClose="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
</MudOverlay>
}



@code {
    [Parameter] public string PromptId { get; set; } = default!;
    private Prompt prompt;

    protected async override Task OnInitializedAsync()
    {
        prompt = await promptData.GetPromptAsync(PromptId);
    }

    private async void EditPrompt()
    {
        Prompt editPrompt = new()
        {
            Title = prompt.Title,
            Description = prompt.Description,
        };

        var options = new DialogOptions
        {
            CloseOnEscapeKey = true,
            CloseButton = true
        };

        var parameters = new DialogParameters
        {
            ["Prompt"] = editPrompt
        };

        var dialog = DialogService.Show<PromptEdit>($"Edit Prompt", parameters, options);

        var result = await dialog.Result;

        if (!result.Canceled)
        {
            prompt.Title = editPrompt.Title;
            prompt.Description = editPrompt.Description;
            StateHasChanged();

            await promptData.UpdatePromptAsync(prompt);
        }
    }

}
